const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const cron = require('node-cron');

const dbPath = path.join(__dirname, '../../payments.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(botToken, chatId, message) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram
function getUsersWithTelegramSettings() {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath);
    
    db.all(`
      SELECT DISTINCT u.id, u.username, us.telegram_bot_token, us.telegram_chat_id, us.reminder_days
      FROM users u
      JOIN user_settings us ON u.id = us.user_id
      WHERE us.telegram_bot_token IS NOT NULL 
      AND us.telegram_chat_id IS NOT NULL
      AND us.telegram_bot_token != ''
      AND us.telegram_chat_id != ''
    `, [], (err, users) => {
      db.close();
      if (err) {
        reject(err);
      } else {
        resolve(users);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getPaymentsForNotification(userId, reminderDays) {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ reminderDays –¥–Ω–µ–π
    const targetDate = new Date();
    targetDate.setDate(targetDate.getDate() + reminderDays);
    const targetDateStr = targetDate.toISOString().split('T')[0];
    
    db.all(`
      SELECT id, title, amount, due_date, status
      FROM payments 
      WHERE user_id = ? 
      AND status = 'pending'
      AND due_date = ?
      ORDER BY due_date ASC
    `, [userId, targetDateStr], (err, payments) => {
      db.close();
      if (err) {
        reject(err);
      } else {
        resolve(payments);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
function getOverduePayments(userId) {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath);
    
    db.all(`
      SELECT id, title, amount, due_date, status
      FROM payments 
      WHERE user_id = ? 
      AND status = 'overdue'
      ORDER BY due_date ASC
    `, [userId], (err, payments) => {
      db.close();
      if (err) {
        reject(err);
      } else {
        resolve(payments);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function formatNotificationMessage(username, upcomingPayments, overduePayments, reminderDays) {
  let message = `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n\n`;
  
  // –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
  if (upcomingPayments.length > 0) {
    message += `‚è∞ –ß–µ—Ä–µ–∑ ${reminderDays} ${reminderDays === 1 ? '–¥–µ–Ω—å' : reminderDays < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'} –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ–ø–ª–∞—Ç–∞:\n`;
    upcomingPayments.forEach(payment => {
      const dueDate = new Date(payment.due_date);
      const formattedDate = dueDate.toLocaleDateString('ru-RU');
      message += `üìã ${payment.title} - ${payment.amount} ‚ÇΩ (${formattedDate})\n`;
    });
    message += '\n';
  }
  
  // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
  if (overduePayments.length > 0) {
    message += `üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n`;
    overduePayments.forEach(payment => {
      const dueDate = new Date(payment.due_date);
      const formattedDate = dueDate.toLocaleDateString('ru-RU');
      const daysOverdue = Math.floor((new Date() - dueDate) / (1000 * 60 * 60 * 24));
      message += `üìã ${payment.title} - ${payment.amount} ‚ÇΩ (${formattedDate}, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${daysOverdue} ${daysOverdue === 1 ? '–¥–µ–Ω—å' : daysOverdue < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'})\n`;
    });
  }
  
  if (upcomingPayments.length === 0 && overduePayments.length === 0) {
    message += `‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ ${reminderDays} –¥–Ω–µ–π.`;
  }
  
  return message;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkAndSendNotifications() {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π: ${new Date().toLocaleString('ru-RU')}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram
    const users = await getUsersWithTelegramSettings();
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram`);
    
    for (const user of users) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        const upcomingPayments = await getPaymentsForNotification(user.id, user.reminder_days || 3);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        const overduePayments = await getOverduePayments(user.id);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å
        if (upcomingPayments.length > 0 || overduePayments.length > 0) {
          const message = formatNotificationMessage(
            user.username, 
            upcomingPayments, 
            overduePayments, 
            user.reminder_days || 3
          );
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const success = await sendTelegramNotification(
            user.telegram_bot_token, 
            user.telegram_chat_id, 
            message
          );
          
          if (success) {
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
          }
        } else {
          console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username}: –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, error.message);
      }
    }
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}`);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 09:00
function startNotificationDaemon() {
  console.log('üöÄ –î–µ–º–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞–ø—É—â–µ–Ω');
  console.log('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 09:00');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  cron.schedule('0 9 * * *', () => {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
    checkAndSendNotifications();
  }, {
    scheduled: true,
    timezone: "Europe/Moscow"
  });
  
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É
  // checkAndSendNotifications();
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startNotificationDaemon();
}

module.exports = {
  startNotificationDaemon,
  checkAndSendNotifications
};
