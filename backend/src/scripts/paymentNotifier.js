const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const cron = require('node-cron');

const dbPath = path.join(__dirname, '../../payments.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(botToken, chatId, message) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram
function getUsersWithTelegramSettings() {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath);
    
    db.all(`
      SELECT DISTINCT u.id, u.username, us.telegram_bot_token, us.telegram_chat_id, us.reminder_days
      FROM users u
      JOIN user_settings us ON u.id = us.user_id
      WHERE us.telegram_bot_token IS NOT NULL 
      AND us.telegram_chat_id IS NOT NULL
      AND us.telegram_bot_token != ''
      AND us.telegram_chat_id != ''
    `, [], (err, users) => {
      db.close();
      if (err) {
        reject(err);
      } else {
        resolve(users);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getPaymentsForNotification(userId, reminderDays) {
  return new Promise((resolve, reject) => {
    const db = new sqlite3.Database(dbPath);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ) –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ reminderDays –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    // –∏ –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    const today = new Date();
    const maxDate = new Date();
    maxDate.setDate(today.getDate() + reminderDays);
    
    db.all(`
      SELECT p.id, p.title, p.amount, p.due_date, p.payment_date,
             c.name as currency_name, c.symbol as currency_symbol,
             pc.name as category_name, pc.color as category_color,
             pm.name as payment_method_name
      FROM payments p
      LEFT JOIN currencies c ON p.currency_id = c.id
      LEFT JOIN payment_categories pc ON p.category_id = pc.id
      LEFT JOIN payment_methods pm ON p.payment_method_id = pm.id
      WHERE p.user_id = ? 
      AND p.payment_date IS NULL
      AND p.due_date <= date(?, '+${reminderDays} days')
      ORDER BY p.due_date ASC
    `, [userId, today.toISOString().split('T')[0]], (err, payments) => {
      db.close();
      if (err) {
        reject(err);
      } else {
        resolve(payments);
      }
    });
  });
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function formatNotificationMessage(username, activePayments, reminderDays) {
  let message = `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n\n`;
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
  if (activePayments.length > 0) {
    message += `‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n`;
    activePayments.forEach(payment => {
      const dueDate = new Date(payment.due_date);
      const today = new Date();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 00:00:00 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
      const dueDateOnly = new Date(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate());
      const todayOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      
      const daysUntilDue = Math.ceil((dueDateOnly - todayOnly) / (1000 * 60 * 60 * 24));
      const formattedDate = dueDate.toLocaleDateString('ru-RU');
      const currencySymbol = payment.currency_symbol || '‚ÇΩ';
      const categoryName = payment.category_name || '–î—Ä—É–≥–æ–µ';
      const paymentMethod = payment.payment_method_name || '–ù–µ —É–∫–∞–∑–∞–Ω';
      
      message += `üìã ${payment.title}\n`;
      message += `   üí∞ ${payment.amount} ${currencySymbol}\n`;
      message += `   üè∑Ô∏è ${categoryName}\n`;
      message += `   üí≥ ${paymentMethod}\n`;
      message += `   üìÖ ${formattedDate}\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–ø–ª–∞—Ç—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å
      if (daysUntilDue > 0) {
        message += `   ‚è∞ –î–æ –æ–ø–ª–∞—Ç—ã: ${daysUntilDue} ${daysUntilDue === 1 ? '–¥–µ–Ω—å' : daysUntilDue < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n`;
      } else if (daysUntilDue === 0) {
        message += `   ‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è!\n`;
      } else {
        message += `   üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${Math.abs(daysUntilDue)} ${Math.abs(daysUntilDue) === 1 ? '–¥–µ–Ω—å' : Math.abs(daysUntilDue) < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n`;
      }
      message += '\n';
    });
  }
  
  if (activePayments.length === 0) {
    message += `‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è.`;
  }
  
  return message;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function checkAndSendNotificationsForUser(userId, botToken, chatId, reminderDays) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${new Date().toLocaleString('ru-RU')}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const activePayments = await getPaymentsForNotification(userId, reminderDays);
    
    if (activePayments.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const db = new sqlite3.Database(dbPath);
      const username = await new Promise((resolve, reject) => {
        db.get('SELECT username FROM users WHERE id = ?', [userId], (err, user) => {
          db.close();
          if (err) reject(err);
          else resolve(user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        });
      });
      
      const message = formatNotificationMessage(username, activePayments, reminderDays);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const success = await sendTelegramNotification(botToken, chatId, message);
      
      if (success) {
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`);
        return { success: true, payments_count: activePayments.length, message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' };
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`);
        return { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' };
      }
    } else {
      console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
      return { success: true, payments_count: 0, message: '–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
    return { success: false, error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkAndSendNotifications() {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π: ${new Date().toLocaleString('ru-RU')}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram
    const users = await getUsersWithTelegramSettings();
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram`);
    
    for (const user of users) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)
        const activePayments = await getPaymentsForNotification(user.id, user.reminder_days || 3);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å
        if (activePayments.length > 0) {
          const message = formatNotificationMessage(
            user.username, 
            activePayments, 
            user.reminder_days || 3
          );
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const success = await sendTelegramNotification(
            user.telegram_bot_token, 
            user.telegram_chat_id, 
            message
          );
          
          if (success) {
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
          }
        } else {
          console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username}: –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, error.message);
      }
    }
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}`);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 09:00
function startNotificationDaemon() {
  console.log('üöÄ –î–µ–º–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞–ø—É—â–µ–Ω');
  console.log('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 09:00');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  cron.schedule('0 9 * * *', () => {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
    checkAndSendNotifications();
  }, {
    scheduled: true,
    timezone: "Europe/Moscow"
  });
  
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É
  // checkAndSendNotifications();
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startNotificationDaemon();
}

module.exports = {
  startNotificationDaemon,
  checkAndSendNotifications,
  checkAndSendNotificationsForUser
};
