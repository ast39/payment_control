const readline = require('readline');
const bcrypt = require('bcryptjs');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const dbPath = path.join(__dirname, '../../payments.db');

console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n');

rl.question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ', (username) => {
  rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ', (password) => {
    rl.question('–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ', (name) => {
      if (!username || !password || !name) {
        console.log('‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!');
        rl.close();
        return;
      }

      if (password.length < 6) {
        console.log('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤!');
        rl.close();
        return;
      }

      const db = new sqlite3.Database(dbPath);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      db.get('SELECT id FROM users WHERE username = ?', [username], (err, existingUser) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
          db.close();
          rl.close();
          return;
        }

        if (existingUser) {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
          db.close();
          rl.close();
          return;
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        bcrypt.hash(password, 10, (err, hashedPassword) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', err.message);
            db.close();
            rl.close();
            return;
          }

          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          db.run('INSERT INTO users (username, password, name) VALUES (?, ?, ?)', 
            [username, hashedPassword, name], function(err) {
            if (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
              db.close();
              rl.close();
              return;
            }

            const userId = this.lastID;

                    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        db.run('INSERT INTO user_settings (user_id, telegram_bot_token, telegram_chat_id, reminder_days) VALUES (?, ?, ?, ?)', 
          [userId, null, null, 3], (err) => {
              if (err) {
                console.error('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err.message);
              }
              
              db.close();
              console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
              console.log(`üìã ID: ${userId}`);
              console.log(`üë§ –õ–æ–≥–∏–Ω: ${username}`);
              console.log(`üìù –ò–º—è: ${name}`);
              console.log('\nüîë –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
              rl.close();
            });
          });
        });
      });
    });
  });
});
