const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, '../../payments.db');
const db = new sqlite3.Database(dbPath);

console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

db.serialize(() => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ description –≤ —Ç–∞–±–ª–∏—Ü–µ payments
  db.get("PRAGMA table_info(payments)", (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã payments:', err);
      return;
    }
    
    db.all("PRAGMA table_info(payments)", (err, columns) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ payments:', err);
        return;
      }
      
      const hasDescription = columns.some(col => col.name === 'description');
      
      if (!hasDescription) {
        console.log('‚ûï –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ description –≤ —Ç–∞–±–ª–∏—Ü—É payments...');
        db.run('ALTER TABLE payments ADD COLUMN description TEXT', (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è description:', err);
          } else {
            console.log('‚úÖ –ü–æ–ª–µ description –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É payments');
          }
        });
      } else {
        console.log('‚úÖ –ü–æ–ª–µ description —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ payments');
      }
    });
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ telegram_bot_token –≤ —Ç–∞–±–ª–∏—Ü–µ user_settings
  db.get("PRAGMA table_info(user_settings)", (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã user_settings:', err);
      return;
    }
    
    db.all("PRAGMA table_info(user_settings)", (err, columns) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ user_settings:', err);
        return;
      }
      
      const hasBotToken = columns.some(col => col.name === 'telegram_bot_token');
      
      if (!hasBotToken) {
        console.log('‚ûï –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ telegram_bot_token –≤ —Ç–∞–±–ª–∏—Ü—É user_settings...');
        db.run('ALTER TABLE user_settings ADD COLUMN telegram_bot_token TEXT', (err) => {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è telegram_bot_token:', err);
          } else {
            console.log('‚úÖ –ü–æ–ª–µ telegram_bot_token –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É user_settings');
          }
        });
      } else {
        console.log('‚úÖ –ü–æ–ª–µ telegram_bot_token —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ user_settings');
      }
    });
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, –¥–æ–±–∞–≤–ª—è—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  setTimeout(() => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è—è telegram_bot_token –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    db.run(`
      UPDATE user_settings 
      SET telegram_bot_token = COALESCE(telegram_bot_token, NULL)
      WHERE telegram_bot_token IS NULL
    `, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è user_settings:', err);
      } else {
        console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏, –¥–æ–±–∞–≤–ª—è—è description –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    db.run(`
      UPDATE payments 
      SET description = COALESCE(description, NULL)
      WHERE description IS NULL
    `, (err) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è payments:', err);
      } else {
        console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      }
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    setTimeout(() => {
      db.close((err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î:', err);
        } else {
          console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
      });
    }, 1000);
  }, 2000);
});
